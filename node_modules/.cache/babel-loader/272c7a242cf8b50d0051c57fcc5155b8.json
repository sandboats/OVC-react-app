{"ast":null,"code":"import _objectSpread from \"/Users/Akhil/Desktop/Reactjs/j3378m4v3y/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { FETCH_USERS_BEGIN, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE } from \"./userActions\";\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\nexport default function userReducer(state = initialState, action) {\n  switch (action.type) {\n    case FETCH_USERS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return _objectSpread({}, state, {\n        loading: true,\n        error: null\n      });\n\n    case FETCH_USERS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return _objectSpread({}, state, {\n        loading: false,\n        items: action.payload.users\n      });\n\n    case FETCH_USERS_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return _objectSpread({}, state, {\n        loading: false,\n        error: action.payload.error,\n        items: []\n      });\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Akhil/Desktop/Reactjs/j3378m4v3y/src/userReducer.js"],"names":["FETCH_USERS_BEGIN","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","initialState","items","loading","error","userReducer","state","action","type","payload","users"],"mappings":";AAAA,SACEA,iBADF,EAEEC,mBAFF,EAGEC,mBAHF,QAIO,eAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,eAAe,SAASC,WAAT,CACbC,KAAK,GAAGL,YADK,EAEbM,MAFa,EAGb;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,iBAAL;AACE;AACA;AACA,+BACKQ,KADL;AAEEH,QAAAA,OAAO,EAAE,IAFX;AAGEC,QAAAA,KAAK,EAAE;AAHT;;AAMF,SAAKL,mBAAL;AACE;AACA;AACA,+BACKO,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGED,QAAAA,KAAK,EAAEK,MAAM,CAACE,OAAP,CAAeC;AAHxB;;AAMF,SAAKV,mBAAL;AACE;AACA;AACA;AACA;AACA;AACA,+BACKM,KADL;AAEEH,QAAAA,OAAO,EAAE,KAFX;AAGEC,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeL,KAHxB;AAIEF,QAAAA,KAAK,EAAE;AAJT;;AAOF;AACE;AACA,aAAOI,KAAP;AAlCJ;AAoCD","sourcesContent":["import {\n  FETCH_USERS_BEGIN,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from \"./userActions\";\n\nconst initialState = {\n  items: [],\n  loading: false,\n  error: null\n};\n\nexport default function userReducer(\n  state = initialState,\n  action\n) {\n  switch (action.type) {\n    case FETCH_USERS_BEGIN:\n      // Mark the state as \"loading\" so we can show a spinner or something\n      // Also, reset any errors. We're starting fresh.\n      return {\n        ...state,\n        loading: true,\n        error: null\n      };\n\n    case FETCH_USERS_SUCCESS:\n      // All done: set loading \"false\".\n      // Also, replace the items with the ones from the server\n      return {\n        ...state,\n        loading: false,\n        items: action.payload.users\n      };\n\n    case FETCH_USERS_FAILURE:\n      // The request failed, but it did stop, so set loading to \"false\".\n      // Save the error, and we can display it somewhere\n      // Since it failed, we don't have items to display anymore, so set it empty.\n      // This is up to you and your app though: maybe you want to keep the items\n      // around! Do whatever seems right.\n      return {\n        ...state,\n        loading: false,\n        error: action.payload.error,\n        items: []\n      };\n\n    default:\n      // ALWAYS have a default case in a reducer\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}